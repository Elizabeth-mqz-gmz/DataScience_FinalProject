library(e1071) # asimetria
library(plyr)
library(fitdistrplus) # grafica Cullen-Frey
library(dslabs) # datos PCA
library(factoextra) # graficas PCA
library(purrr)
library(bestNormalize)
library(car)
library(ggiraph)
library(predict3d)
library(grid)
library(gridExtra)
require(nortest)
# Datos antes de omitir faltantes
length(WCGS$age)
# Abrir el archivo de datos
setwd("D:/Archivos")
WCGS <- read.csv("source/wcgs.csv")
head(WCGS)
# Datos antes de omitir faltantes
length(WCGS$age)
# Datos despues de eliminar faltantes
WCGS <- na.omit(WCGS)
length(WCGS$age)
# Abrir el archivo de datos
#setwd("D:/Archivos")
WCGS <- read.csv("source/wcgs.csv")
head(WCGS)
# Datos antes de omitir faltantes
length(WCGS$age)
# Datos despues de eliminar faltantes
WCGS <- na.omit(WCGS)
length(WCGS$age)
# Matriz para el layout
x <- c(1, 2, 3) # tres gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable respuesta
Plot1 <- ggplot(WCGS, aes(x = chd69, y = weight)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot del peso relacionado con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Peso") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 1
Plot2 <- ggplot(WCGS, aes(x = chd69, y = height)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la altura relacionada con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Altura") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 2
Plot3 <- ggplot(WCGS, aes(x = chd69, y = chol)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot del colesterol relacionado con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Colesterol")
Plots <- list(Plot1,Plot2,Plot3)
layout <- rbind(c(1,2),c(3))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Matriz para el layout
x <- c(1, 2, 3) # tres gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable predictora 3
Plot4 <- ggplot(WCGS, aes(x = chd69, y = sbp)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la P.sistólica relacionada con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Presión sistolica") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 3
Plot5 <- ggplot(WCGS, aes(x = chd69, y = dbp)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la P.diastólica relacionada \ncon enfermedad coronaria ", x = "Enfermedad Coronaria", y = "Presión diastolica") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 3
Plot6 <- ggplot(WCGS, aes(x = chd69, y = age)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la edad relacionada \ncon enfermedad coronaria ", x = "Enfermedad Coronaria", y = "Edad")
Plots <- list(Plot4,Plot5,Plot6)
layout <- rbind(c(1,2),c(3))
grid.arrange(grobs = Plots,layout_matrix = layout)
newChol <- (WCGS$chol <= 400)
WCGS <- WCGS[newChol,]
length(WCGS$age)
Values <- data.frame(Edad = as.numeric(WCGS$age), IMC = as.numeric(WCGS$bmi),Altura = as.numeric(WCGS$height), Coronaria = WCGS$chd69, Colesterol = as.numeric(WCGS$chol))
head(Values)
max(Values$IMC)
min(Values$IMC)
################## Categorizar pesos #################
obex <- Values["IMC"] > 39.9
obeso <- (Values["IMC"] > 29.9) & (Values["IMC"] <= 39.9)
sobrep <- (Values["IMC"] > 24.9) & (Values["IMC"] <= 29.9)
Norm <- (Values["IMC"] > 18.5) & (Values["IMC"] <= 24.9)
bajo <- Values["IMC"] <= 18.5
Values["IMC"][obex] <- "Extremo"
Values["IMC"][obeso] <- "obeso"
Values["IMC"][sobrep] <- "Sobrepeso"
Values["IMC"][Norm] <- "Normal"
Values["IMC"][bajo] <- "Bajo"
################## Categorizar altura #################
Bajo <- Values["Altura"] <= 65
Promedio <- (Values["Altura"] > 65) & (Values["Altura"] < 71)
Alto <- Values["Altura"] >= 71
Values["Altura"][Bajo] <- "Bajo"
Values["Altura"][Promedio] <- "Normal"
Values["Altura"][Alto] <- "Alto"
################## Categorizar edad #################
Adulto <- Values["Edad"] <= 45
Mayor <- (Values["Edad"] > 45) & (Values["Edad"] < 55)
Viejo <- Values["Edad"] >= 55
Values["Edad"][Adulto] <- "Adulto"
Values["Edad"][Mayor] <- "Adulto mayor"
Values["Edad"][Viejo] <- "Viejo"
################ Categorizar colesterol ###################
CNorm <- Values["Colesterol"] <= 200
CNAlt <- (Values["Colesterol"] > 200) & (Values["Colesterol"] < 240)
CAlt <- Values["Colesterol"] >= 240
Values["Colesterol"][CNorm] <- "Normal"
Values["Colesterol"][CNAlt] <- "Normal-Alto"
Values["Colesterol"][CAlt] <- "Alto"
head(Values)
# Realizar conteo de categorias
table(Values$IMC)
IMC <- table(Values$IMC)
IMC <- as.data.frame(IMC)
table(Values$Colesterol)
Colesterol <- table(Values$Colesterol)
Colesterol <- as.data.frame(Colesterol)
table(Values$Altura)
Altura <- table(Values$Altura)
Altura <- as.data.frame(Altura)
table(Values$Edad)
Edad <- table(Values$Edad)
Edad <- as.data.frame(Edad)
# Matriz para el layout
x <- c(1, 2) # cuatro gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable respuesta
Plot1 <- ggplot(IMC, aes(x = Var1, y = Freq, fill = c("Bajo","Normal", "Obeso","Sobrepeso"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de IMC", x = "Nivel de IMC", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Nivel IMC")) + theme(legend.key.size = unit(0.2,"line"))
# Plot de variable predictora 1
Plot2 <- ggplot(Colesterol, aes(x = Var1, y = Freq, fill = c("Alto","Normal", "Normal-Alto"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de Colesterol", x = "Nivel de Colesterol", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Nivel Colesterol")) +  theme(legend.key.size = unit(0.2,"line"))
Plots <- list(Plot1,Plot2)
layout <- rbind(c(1,2))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Matriz para el layout
x <- c(1, 2) # cuatro gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable predictora 2
Plot3 <- ggplot(Altura, aes(x = Var1, y = Freq, fill = c("Alto","Bajo","Normal"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de Altura", x = "Nivel de Altura", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Nivel Altura")) +  theme(legend.key.size = unit(0.2,"line"))
# Plot de variable predictora 3
Plot4 <- ggplot(Edad, aes(x = Var1, y = Freq, fill = c("Adulto","Adulto M", "Viejo"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de Edad", x = "Nivel de Edad", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Grupo de Edad")) +  theme(legend.key.size = unit(0.2,"line"))
Plots <- list(Plot3,Plot4)
layout <- rbind(c(1,2))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Realizar el conteo cardiovascular dependiendo del nivel de colesterol
Group <- tapply(Values$Colesterol,
list(Values$Colesterol, Values$Coronaria),
table)
Group <- as.data.frame(Group)
Group$Colesterol <- rownames(Group)
Group
# Generar el formato long del dataframe
Group <- reshape(Group, #Objeto a transformar
direction = "long", #Necesitamos formato long
varying = list(names(Group)[1:2]), #Las columnas a alargar (las que tienen las cuentas) son la 1 y la 2
v.names = "Counts", #Las cuentas se almacenaran en la columna "Counts"
idvar = "Colesterol", #La variable con los identificadores del grupo de actividad fisica
timevar = "Coronaria", #Variable que vamos a alargar, que corresponde a las columnas "no" y "yes"
times = c("no", "yes"))
row.names(Group) <- NULL
Group
# Barplot que refleja los niveles de colesterol dependiendo el grupo
ggplot(Group, aes(x = Colesterol, y = Counts, fill = Coronaria)) +
geom_bar(stat = "identity", position=position_dodge()) + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de colesterol y enfermedad cardiovascular", x = "Nivel de colesterol", y = "Número de pacientes") + scale_fill_discrete(name = "Cardiovascular", labels = c("Ausencia", "Presencia"))
shapiro.test(WCGS$bmi)
shapiro.test(WCGS$weight)
# Matriz para el layout
x <- c(1, 2) # cuatro gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
Plot1 <- ggplot(WCGS, aes(sample = bmi)) +
stat_qq(alpha = 0.5) +
stat_qq_line(color = "red") +
labs(title = "Grafica cuantil-cuantil IMC", x = "Teoréticos", y = "Muestra")
Plot2 <- ggplot(WCGS, aes(sample = weight)) +
stat_qq(alpha = 0.5) +
stat_qq_line(color = "blue") +
labs(title = "Grafica cuantil-cuantil Peso", x = "Teoréticos", y = "Muestra")
Plots <- list(Plot1,Plot2)
layout <- rbind(c(1,2))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Normalizar los datos
set.seed(42)
bestNormalize(WCGS$weight)
# Guardar datos normalizados
bestnorm <- bestNormalize(WCGS$weight)
WCGS$NormPeso <- bestnorm$x.t
head(bestnorm$x.t)
ggplot(WCGS, aes(sample = NormPeso)) +
stat_qq(alpha = 0.5) +
stat_qq_line(color = "green") +
labs(title = "Grafica cuantil-cuantil Peso", x = "Teoréticos", y = "Muestra")
modelo <- lm(data = WCGS, NormPeso ~ bmi)
summary(modelo)
ggplot(WCGS, aes(bmi, NormPeso)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Grafica de dispersion entre IMC y peso con datos normalizados", x = "IMC", y = "Peso")
WCGS$Lresiduals <- modelo$residuals
WCGS$Lpredicted <- modelo$fitted.values
ggplot(WCGS, aes(x = bmi, y = NormPeso)) +
geom_smooth(method = lm) +  # añadimos la linea de regresion
geom_segment(aes(xend = bmi, yend = Lpredicted)) +  # esto añade las lineas de distancia
geom_point(aes(y = Lpredicted)) +  # agregamos los puntos de los valores predichos
geom_point(color = "red") +  # agregamos los puntos de las observaciones en color rojo
labs(title = "Grafica de residuales", x = "IMC", y = "Peso")
WCGS$index <- 1:nrow(WCGS)
ggplot(WCGS, aes(x = index, y = Lresiduals)) +
geom_point() +
labs(title = "Grafica de residuales", x = "Índice", y = "Residuales")
table(WCGS["chd69"])
WCGS$Colesterol <- Values$Colesterol
WCGS$Edad <- Values$Edad
WCGS["chd69"][WCGS["chd69"] == "No"] <- 0
WCGS["chd69"][WCGS["chd69"] == "Yes"] <- 1
modelo_multiple <- lm(data = WCGS , NormPeso ~ age + height + sbp + dbp + chol + behpat + bmi + dibpat + smoke )
summary(modelo_multiple)
# Generar grafico multivariable
ggplot(WCGS, aes(x = bmi, y = NormPeso, color = Colesterol)) +
geom_smooth(method = lm) +  # añadimos la linea de regresion
geom_point(aes(shape = as.factor(smoke))) +  # agregamos los puntos de las observaciones en color rojo
labs(title = "Modelo lineal de variables significativas", x = "IMC", y = "Peso Normalizado", color = "Colesterol", shape = "Fuma")
# Generar grafico multivariable
ggplot(WCGS, aes(x = sbp, y = NormPeso, color = behpat)) +
geom_smooth(method = lm) +  # añadimos la linea de regresion
geom_point(aes(shape = as.factor(Edad))) +  # agregamos los puntos de las observaciones en color rojo
labs(title = "Modelo lineal de variables no significativas", x = "Sistolica", y = "Peso Normalizado", color = "Conducta", shape = "Edad")
# Verificar tipo de dato
typeof(WCGS$chd69)
# Conversion numerica
WCGS$chd69 <- as.numeric(WCGS$chd69)
# Modelo logistico
modelo_logistico1 <- glm(data = WCGS, chd69 ~ bmi, family = "binomial")
summary(modelo_logistico1)
# Grafico de modelo logistico
ggplot(WCGS, aes(x=bmi, y=(chd69))) +
geom_point(alpha=.5) +
stat_smooth(method = glm, se = FALSE, method.args = list(family = binomial)) + labs(title = "Grafica de dispersion entre Coronaria y IMC", x = "IMC", y = "Coronaria")
# Conversion numerica
WCGS$chd69 <- as.numeric(WCGS$chd69)
# Modelo logistico
modelo_logistico2 <- glm(data = WCGS, chd69 ~ chol, family = "binomial")
summary(modelo_logistico2)
# Grafico de modelo logistico
ggplot(WCGS, aes(x=chol, y=(chd69))) +
geom_point(alpha=.5) +
stat_smooth(method = glm, se = FALSE, method.args = list(family = binomial)) + labs(title = "Grafica de dispersion entre Coronaria y Colesterol", x = "Colesterol", y = "Coronaria")
modelo_logistico_mult <- glm(data = WCGS, chd69 ~  age + height + weight + sbp + dbp + chol + behpat + bmi + dibpat + smoke , family = "binomial")
summary(modelo_logistico_mult)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dplyr)
library(e1071) # asimetria
library(plyr)
library(fitdistrplus) # grafica Cullen-Frey
library(dslabs) # datos PCA
library(factoextra) # graficas PCA
library(purrr)
library(bestNormalize)
library(car)
library(ggiraph)
library(predict3d)
library(grid)
library(gridExtra)
require(nortest)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dplyr)
library(e1071) # asimetria
library(plyr)
library(fitdistrplus) # grafica Cullen-Frey
library(dslabs) # datos PCA
library(factoextra) # graficas PCA
# Abrir el archivo de datos
#setwd("D:/Archivos")
WCGS <- read.csv("source/wcgs.csv")
head(WCGS)
# Datos antes de omitir faltantes
length(WCGS$age)
# Datos despues de eliminar faltantes
WCGS <- na.omit(WCGS)
length(WCGS$age)
# Matriz para el layout
x <- c(1, 2, 3) # tres gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable respuesta
Plot1 <- ggplot(WCGS, aes(x = chd69, y = weight)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot del peso relacionado con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Peso") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 1
Plot2 <- ggplot(WCGS, aes(x = chd69, y = height)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la altura relacionada con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Altura") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 2
Plot3 <- ggplot(WCGS, aes(x = chd69, y = chol)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot del colesterol relacionado con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Colesterol")
Plots <- list(Plot1,Plot2,Plot3)
layout <- rbind(c(1,2),c(3))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Matriz para el layout
x <- c(1, 2, 3) # tres gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable predictora 3
Plot4 <- ggplot(WCGS, aes(x = chd69, y = sbp)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la P.sistólica relacionada con la \nenfermedad coronaria ", x = "Enfermedad Coronaria", y = "Presión sistolica") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 3
Plot5 <- ggplot(WCGS, aes(x = chd69, y = dbp)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la P.diastólica relacionada \ncon enfermedad coronaria ", x = "Enfermedad Coronaria", y = "Presión diastolica") + theme(plot.title = element_text(size=7.5))
# Plot de variable predictora 3
Plot6 <- ggplot(WCGS, aes(x = chd69, y = age)) +
geom_boxplot(colour=c("green","blue")) +
labs(title = "Boxplot de la edad relacionada \ncon enfermedad coronaria ", x = "Enfermedad Coronaria", y = "Edad")
Plots <- list(Plot4,Plot5,Plot6)
layout <- rbind(c(1,2),c(3))
grid.arrange(grobs = Plots,layout_matrix = layout)
newChol <- (WCGS$chol <= 400)
WCGS <- WCGS[newChol,]
length(WCGS$age)
Values <- data.frame(Edad = as.numeric(WCGS$age), IMC = as.numeric(WCGS$bmi),Altura = as.numeric(WCGS$height), Coronaria = WCGS$chd69, Colesterol = as.numeric(WCGS$chol))
head(Values)
max(Values$IMC)
min(Values$IMC)
################## Categorizar pesos #################
obex <- Values["IMC"] > 39.9
obeso <- (Values["IMC"] > 29.9) & (Values["IMC"] <= 39.9)
sobrep <- (Values["IMC"] > 24.9) & (Values["IMC"] <= 29.9)
Norm <- (Values["IMC"] > 18.5) & (Values["IMC"] <= 24.9)
bajo <- Values["IMC"] <= 18.5
Values["IMC"][obex] <- "Extremo"
Values["IMC"][obeso] <- "obeso"
Values["IMC"][sobrep] <- "Sobrepeso"
Values["IMC"][Norm] <- "Normal"
Values["IMC"][bajo] <- "Bajo"
################## Categorizar altura #################
Bajo <- Values["Altura"] <= 65
Promedio <- (Values["Altura"] > 65) & (Values["Altura"] < 71)
Alto <- Values["Altura"] >= 71
Values["Altura"][Bajo] <- "Bajo"
Values["Altura"][Promedio] <- "Normal"
Values["Altura"][Alto] <- "Alto"
################## Categorizar edad #################
Adulto <- Values["Edad"] <= 45
Mayor <- (Values["Edad"] > 45) & (Values["Edad"] < 55)
Viejo <- Values["Edad"] >= 55
Values["Edad"][Adulto] <- "Adulto"
Values["Edad"][Mayor] <- "Adulto mayor"
Values["Edad"][Viejo] <- "Viejo"
################ Categorizar colesterol ###################
CNorm <- Values["Colesterol"] <= 200
CNAlt <- (Values["Colesterol"] > 200) & (Values["Colesterol"] < 240)
CAlt <- Values["Colesterol"] >= 240
Values["Colesterol"][CNorm] <- "Normal"
Values["Colesterol"][CNAlt] <- "Normal-Alto"
Values["Colesterol"][CAlt] <- "Alto"
head(Values)
# Realizar conteo de categorias
table(Values$IMC)
IMC <- table(Values$IMC)
IMC <- as.data.frame(IMC)
table(Values$Colesterol)
Colesterol <- table(Values$Colesterol)
Colesterol <- as.data.frame(Colesterol)
table(Values$Altura)
Altura <- table(Values$Altura)
Altura <- as.data.frame(Altura)
table(Values$Edad)
Edad <- table(Values$Edad)
Edad <- as.data.frame(Edad)
# Matriz para el layout
x <- c(1, 2) # cuatro gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable respuesta
Plot1 <- ggplot(IMC, aes(x = Var1, y = Freq, fill = c("Bajo","Normal", "Obeso","Sobrepeso"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de IMC", x = "Nivel de IMC", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Nivel IMC")) + theme(legend.key.size = unit(0.2,"line"))
# Plot de variable predictora 1
Plot2 <- ggplot(Colesterol, aes(x = Var1, y = Freq, fill = c("Alto","Normal", "Normal-Alto"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de Colesterol", x = "Nivel de Colesterol", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Nivel Colesterol")) +  theme(legend.key.size = unit(0.2,"line"))
Plots <- list(Plot1,Plot2)
layout <- rbind(c(1,2))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Matriz para el layout
x <- c(1, 2) # cuatro gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
# Plot de variable predictora 2
Plot3 <- ggplot(Altura, aes(x = Var1, y = Freq, fill = c("Alto","Bajo","Normal"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de Altura", x = "Nivel de Altura", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Nivel Altura")) +  theme(legend.key.size = unit(0.2,"line"))
# Plot de variable predictora 3
Plot4 <- ggplot(Edad, aes(x = Var1, y = Freq, fill = c("Adulto","Adulto M", "Viejo"))) +
geom_bar(stat = "identity") + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de Edad", x = "Nivel de Edad", y = "Número de pacientes") + theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) + guides(fill=guide_legend(title="Grupo de Edad")) +  theme(legend.key.size = unit(0.2,"line"))
Plots <- list(Plot3,Plot4)
layout <- rbind(c(1,2))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Realizar el conteo cardiovascular dependiendo del nivel de colesterol
Group <- tapply(Values$Colesterol,
list(Values$Colesterol, Values$Coronaria),
table)
Group <- as.data.frame(Group)
Group$Colesterol <- rownames(Group)
Group
# Generar el formato long del dataframe
Group <- reshape(Group, #Objeto a transformar
direction = "long", #Necesitamos formato long
varying = list(names(Group)[1:2]), #Las columnas a alargar (las que tienen las cuentas) son la 1 y la 2
v.names = "Counts", #Las cuentas se almacenaran en la columna "Counts"
idvar = "Colesterol", #La variable con los identificadores del grupo de actividad fisica
timevar = "Coronaria", #Variable que vamos a alargar, que corresponde a las columnas "no" y "yes"
times = c("no", "yes"))
row.names(Group) <- NULL
Group
# Barplot que refleja los niveles de colesterol dependiendo el grupo
ggplot(Group, aes(x = Colesterol, y = Counts, fill = Coronaria)) +
geom_bar(stat = "identity", position=position_dodge()) + labs(title = "Número de Pacientes pertenecientes a cada \ngrupo de colesterol y enfermedad cardiovascular", x = "Nivel de colesterol", y = "Número de pacientes") + scale_fill_discrete(name = "Cardiovascular", labels = c("Ausencia", "Presencia"))
shapiro.test(WCGS$bmi)
shapiro.test(WCGS$weight)
# Matriz para el layout
x <- c(1, 2) # cuatro gráficos diferentes
m <- matrix(x, ncol = 2)
nf <- layout(m)
Plot1 <- ggplot(WCGS, aes(sample = bmi)) +
stat_qq(alpha = 0.5) +
stat_qq_line(color = "red") +
labs(title = "Grafica cuantil-cuantil IMC", x = "Teoréticos", y = "Muestra")
Plot2 <- ggplot(WCGS, aes(sample = weight)) +
stat_qq(alpha = 0.5) +
stat_qq_line(color = "blue") +
labs(title = "Grafica cuantil-cuantil Peso", x = "Teoréticos", y = "Muestra")
Plots <- list(Plot1,Plot2)
layout <- rbind(c(1,2))
grid.arrange(grobs = Plots,layout_matrix = layout)
# Normalizar los datos
set.seed(42)
bestNormalize(WCGS$weight)
# Guardar datos normalizados
bestnorm <- bestNormalize(WCGS$weight)
WCGS$NormPeso <- bestnorm$x.t
head(bestnorm$x.t)
ggplot(WCGS, aes(sample = NormPeso)) +
stat_qq(alpha = 0.5) +
stat_qq_line(color = "green") +
labs(title = "Grafica cuantil-cuantil Peso", x = "Teoréticos", y = "Muestra")
modelo <- lm(data = WCGS, NormPeso ~ bmi)
summary(modelo)
ggplot(WCGS, aes(bmi, NormPeso)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Grafica de dispersion entre IMC y peso con datos normalizados", x = "IMC", y = "Peso")
WCGS$Lresiduals <- modelo$residuals
WCGS$Lpredicted <- modelo$fitted.values
ggplot(WCGS, aes(x = bmi, y = NormPeso)) +
geom_smooth(method = lm) +  # añadimos la linea de regresion
geom_segment(aes(xend = bmi, yend = Lpredicted)) +  # esto añade las lineas de distancia
geom_point(aes(y = Lpredicted)) +  # agregamos los puntos de los valores predichos
geom_point(color = "red") +  # agregamos los puntos de las observaciones en color rojo
labs(title = "Grafica de residuales", x = "IMC", y = "Peso")
WCGS$index <- 1:nrow(WCGS)
ggplot(WCGS, aes(x = index, y = Lresiduals)) +
geom_point() +
labs(title = "Grafica de residuales", x = "Índice", y = "Residuales")
table(WCGS["chd69"])
WCGS$Colesterol <- Values$Colesterol
WCGS$Edad <- Values$Edad
WCGS["chd69"][WCGS["chd69"] == "No"] <- 0
WCGS["chd69"][WCGS["chd69"] == "Yes"] <- 1
modelo_multiple <- lm(data = WCGS , NormPeso ~ age + height + sbp + dbp + chol + behpat + bmi + dibpat + smoke )
summary(modelo_multiple)
# Generar grafico multivariable
ggplot(WCGS, aes(x = bmi, y = NormPeso, color = Colesterol)) +
geom_smooth(method = lm) +  # añadimos la linea de regresion
geom_point(aes(shape = as.factor(smoke))) +  # agregamos los puntos de las observaciones en color rojo
labs(title = "Modelo lineal de variables significativas", x = "IMC", y = "Peso Normalizado", color = "Colesterol", shape = "Fuma")
# Generar grafico multivariable
ggplot(WCGS, aes(x = sbp, y = NormPeso, color = behpat)) +
geom_smooth(method = lm) +  # añadimos la linea de regresion
geom_point(aes(shape = as.factor(Edad))) +  # agregamos los puntos de las observaciones en color rojo
labs(title = "Modelo lineal de variables no significativas", x = "Sistolica", y = "Peso Normalizado", color = "Conducta", shape = "Edad")
# Verificar tipo de dato
typeof(WCGS$chd69)
# Conversion numerica
WCGS$chd69 <- as.numeric(WCGS$chd69)
# Modelo logistico
modelo_logistico1 <- glm(data = WCGS, chd69 ~ bmi, family = "binomial")
summary(modelo_logistico1)
# Grafico de modelo logistico
ggplot(WCGS, aes(x=bmi, y=(chd69))) +
geom_point(alpha=.5) +
stat_smooth(method = glm, se = FALSE, method.args = list(family = binomial)) + labs(title = "Grafica de dispersion entre Coronaria y IMC", x = "IMC", y = "Coronaria")
# Conversion numerica
WCGS$chd69 <- as.numeric(WCGS$chd69)
# Modelo logistico
modelo_logistico2 <- glm(data = WCGS, chd69 ~ chol, family = "binomial")
summary(modelo_logistico2)
# Grafico de modelo logistico
ggplot(WCGS, aes(x=chol, y=(chd69))) +
geom_point(alpha=.5) +
stat_smooth(method = glm, se = FALSE, method.args = list(family = binomial)) + labs(title = "Grafica de dispersion entre Coronaria y Colesterol", x = "Colesterol", y = "Coronaria")
modelo_logistico_mult <- glm(data = WCGS, chd69 ~  age + height + weight + sbp + dbp + chol + behpat + bmi + dibpat + smoke , family = "binomial")
summary(modelo_logistico_mult)
